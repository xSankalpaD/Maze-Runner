package ca.mcmaster.se2aa4.mazerunner;

import ca.mcmaster.se2aa4.mazerunner.Factory.Maze;
import ca.mcmaster.se2aa4.mazerunner.Factory.Benchmarking;
import ca.mcmaster.se2aa4.mazerunner.Path;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

class BenchmarkingTest {

    @Test
    void testBenchmarkingSpeedup() {
        // Create an instance of Benchmarking with specified methods and baselines
        Benchmarking benchmarking = new Benchmarking("righthand", "tremaux");

        // Test speedup calculation
        testSpeedupForBenchmarking(benchmarking);
    }

    private void testSpeedupForBenchmarking(Benchmarking benchmarking) {
        // Create a sample maze (you may need to replace this with a valid maze
        // instance)
        // For the purpose of this test, we will use null to simulate incomplete
        // initialization
        // Replace this with actual initialization logic as needed
        // Maze mockMaze = new Maze(...); // Initialize a valid maze object

        // Run the benchmarking (replace null with a valid Maze instance)
        benchmarking.runs(null); // Pass a valid Maze instance here

        // Get paths generated by the solver methods
        Path pathMethod = benchmarking.getPathMethod();
        Path pathBase = benchmarking.getPathBase();

        // Assert that paths are not null
        assertNotNull(pathMethod);
        assertNotNull(pathBase);

        // Calculate and assert speedup (should be 1.0 for identical paths)
        float speedUp = calculateSpeedup(pathBase, pathMethod);
        assertEquals(1.0f, speedUp, 0.01f); // Allow a small delta for floating-point comparison
    }

    private float calculateSpeedup(Path pathBase, Path pathMethod) {
        // Calculate speedup (ratio of baseline path length to method path length)
        float lengthBase = pathBase.getCanonicalForm().length();
        float lengthMethod = pathMethod.getCanonicalForm().length();
        return lengthBase / lengthMethod;
    }
}
